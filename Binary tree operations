#include <iostream>
#include <stack>
#include <queue>
using namespace std;

class Node {
public:
    int data;
    Node* left;
    Node* right;

    Node(int val): data(val), left(nullptr), right(nullptr) {}
};

class BinaryTree {
private:
    Node* root;

    // Recursive insertion
    Node* insert(Node* node, int val) {
        if (node == nullptr) {
            return new Node(val);
        }
        if (val < node->data)
            node->left = insert(node->left, val);
        else
            node->right = insert(node->right, val);
        return node;
    }

    // Recursive traversals
    void inorder(Node* node) {
        if (node) {
            inorder(node->left);
            cout << node->data << " ";
            inorder(node->right);
        }
    }

    void preorder(Node* node) {
        if (node) {
            cout << node->data << " ";
            preorder(node->left);
            preorder(node->right);
        }
    }

    void postorder(Node* node) {
        if (node) {
            postorder(node->left);
            postorder(node->right);
            cout << node->data << " ";
        }
    }

    Node* mirror(Node* node) {
        if (node == nullptr) return nullptr;
        Node* temp = mirror(node->left);
        node->left = mirror(node->right);
        node->right = temp;
        return node;
    }

    int height(Node* node) {
        if (node == nullptr) return 0;
        return 1 + max(height(node->left), height(node->right));
    }

    Node* copyTree(Node* node) {
        if (node == nullptr) return nullptr;
        Node* newNode = new Node(node->data);
        newNode->left = copyTree(node->left);
        newNode->right = copyTree(node->right);
        return newNode;
    }

    int countLeaves(Node* node) {
        if (!node) return 0;
        if (!node->left && !node->right) return 1;
        return countLeaves(node->left) + countLeaves(node->right);
    }

    int countInternal(Node* node) {
        if (!node || (!node->left && !node->right)) return 0;
        return 1 + countInternal(node->left) + countInternal(node->right);
    }

    void erase(Node* &node) {
        if (node) {
            erase(node->left);
            erase(node->right);
            delete node;
            node = nullptr;
        }
    }

public:
    BinaryTree(): root(nullptr) {}

    // Copy constructor
    BinaryTree(const BinaryTree& other) {
        root = copyTree(other.root);
    }

    // Assignment operator
    BinaryTree& operator=(const BinaryTree& other) {
        if (this != &other) {
            erase(root);
            root = copyTree(other.root);
        }
        return *this;
    }

    void insert(int val) {
        root = insert(root, val);
    }

    void inorder() {
        inorder(root);
        cout << endl;
    }

    void preorder() {
        preorder(root);
        cout << endl;
    }

    void postorder() {
        postorder(root);
        cout << endl;
    }

    void inorderNonRecursive() {
        stack<Node*> st;
        Node* curr = root;
        while (curr || !st.empty()) {
            while (curr) {
                st.push(curr);
                curr = curr->left;
            }
            curr = st.top(); st.pop();
            cout << curr->data << " ";
            curr = curr->right;
        }
        cout << endl;
    }

    void preorderNonRecursive() {
        if (!root) return;
        stack<Node*> st;
        st.push(root);
        while (!st.empty()) {
            Node* node = st.top(); st.pop();
            cout << node->data << " ";
            if (node->right) st.push(node->right);
            if (node->left) st.push(node->left);
        }
        cout << endl;
    }

    void postorderNonRecursive() {
        if (!root) return;
        stack<Node*> st1, st2;
        st1.push(root);
        while (!st1.empty()) {
            Node* node = st1.top(); st1.pop();
            st2.push(node);
            if (node->left) st1.push(node->left);
            if (node->right) st1.push(node->right);
        }
        while (!st2.empty()) {
            cout << st2.top()->data << " ";
            st2.pop();
        }
        cout << endl;
    }

    void mirrorTree() {
        root = mirror(root);
    }

    int getHeight() {
        return height(root);
    }

    int getLeafCount() {
        return countLeaves(root);
    }

    int getInternalCount() {
        return countInternal(root);
    }

    void eraseTreeRecursive() {
        erase(root);
    }

    void eraseTreeNonRecursive() {
        if (!root) return;
        stack<Node*> st;
        st.push(root);
        while (!st.empty()) {
            Node* curr = st.top(); st.pop();
            if (curr->left) st.push(curr->left);
            if (curr->right) st.push(curr->right);
            delete curr;
        }
        root = nullptr;
    }
};

// --- Main function for testing ---
int main() {
    BinaryTree tree;
    int values[] = {50, 30, 70, 20, 40, 60, 80};
    for (int val : values)
        tree.insert(val);

    cout << "Inorder Recursive: ";
    tree.inorder();

    cout << "Preorder Recursive: ";
    tree.preorder();

    cout << "Postorder Recursive: ";
    tree.postorder();

    cout << "Inorder Non-Recursive: ";
    tree.inorderNonRecursive();

    cout << "Preorder Non-Recursive: ";
    tree.preorderNonRecursive();

    cout << "Postorder Non-Recursive: ";
    tree.postorderNonRecursive();

    cout << "Height of tree: " << tree.getHeight() << endl;

    cout << "Leaf count: " << tree.getLeafCount() << endl;
    cout << "Internal nodes count: " << tree.getInternalCount() << endl;

    cout << "Mirroring tree...\n";
    tree.mirrorTree();
    cout << "Inorder after mirror: ";
    tree.inorder();

    cout << "Copying tree using operator=\n";
    BinaryTree treeCopy;
    treeCopy = tree;
    cout << "Copied tree inorder: ";
    treeCopy.inorder();

    cout << "Erasing original tree (recursive)...\n";
    tree.eraseTreeRecursive();
    cout << "Inorder of original after erase: ";
    tree.inorder();

    cout << "Erasing copied tree (non-recursive)...\n";
    treeCopy.eraseTreeNonRecursive();
    cout << "Inorder of copied after erase: ";
    treeCopy.inorder();

    return 0;
}
